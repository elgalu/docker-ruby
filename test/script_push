#!/usr/bin/env bash

# set -e: exit asap if a command exits with a non-zero status
set -e

###################
# Echo with Error #
###################
# echo fn that outputs to stderr http://stackoverflow.com/a/2990533/511069
echoerr() {
  cat <<< "$@" 1>&2;
}

########################
# Print error and exit #
########################
die () {
  echoerr "ERROR: $1"
  # if $2 is defined AND NOT EMPTY, use $2; otherwise, set to "160"
  errnum=${2-160}
  exit $errnum
}

#######################################
# Docker login, tag and push ruby #
#######################################
docker_login_tag_push() {
  docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
  echo "Logged in to docker with user '${DOCKER_USERNAME}'"
  echo "docker tag and docker push using TRAVIS_TAG=${TRAVIS_TAG}"
  docker tag local/ruby:latest elgalu/ruby:${TRAVIS_TAG}
  docker tag local/ruby:latest elgalu/ruby:latest
  docker push elgalu/ruby:${TRAVIS_TAG} | tee docker_push.log
  docker push elgalu/ruby:latest
}

#################################
# Git config name, email, stuff #
#################################
git_config() {
  git config --global push.default simple
  git config --global user.name "Leo Gallucci Bot"
  git config --global user.email "elgalu3+bot@gmail.com"
}

################################################
# Git create branch, merge, keep local changes #
################################################
git_co_fetch_merge_stash() {
  git checkout -b travis-${TRAVIS_TAG}
  git remote add github "https://elgalubot:${GH_TOKEN}@github.com/elgalu/docker-ruby.git"
  git fetch github
  git stash save || true
  git checkout -t github/master -b github/master
  echo "Will git merge into master"
  git merge travis-${TRAVIS_TAG}
  git stash pop || true
  echo "Completed git_co_fetch_merge_stash()"
}

#########################
# Update the Change log #
#########################
update_changelog() {
  echo "Will update_changelog()..."
  TBD_DOCKER_TAG=${TRAVIS_TAG}
  TBD_DIGEST=$(grep -Po '(?<=digest: )([a-z0-9:]+)' docker_push.log)
  TBD_IMAGE_ID=$(docker inspect -f='{{.Id}}' elgalu/ruby:${TRAVIS_TAG})
  TBD_IMAGE_SIZE=$(docker images --format "{{.Size}}" elgalu/ruby)
  TBD_DOCKER_VERS=$(docker --version 2>&1 | grep -Po '(?<=version )([a-z0-9\.]+)')
  TBD_DOCKER_BUILD=$(docker --version 2>&1 | grep -Po '(?<=build )([a-z0-9\.]+)')
  uname -rm 2>&1 >uname_rm.log || true
  TBD_HOST_UNAME=$(cat uname_rm.log)
  rm -f uname_rm.log
  TBD_DATE=$(date +%F)
  echo "Gathering the exact Ruby version..."
  TBD_RUBY_VERSION=$(docker run --rm -ti elgalu/ruby ruby_version)
  TBD_TIME_ZONE=$(docker run --rm -ti elgalu/ruby printenv TZ | sed -r 's/[\/]+/\\\//g')
  UBUNTU_FLAVOR=$(docker run --rm -ti elgalu/ruby printenv UBUNTU_FLAVOR)
  UBUNTU_DATE=$(docker run --rm -ti elgalu/ruby printenv UBUNTU_DATE)
  sed -i -- "s/TBD_DOCKER_TAG/${TBD_DOCKER_TAG}/g" CHANGELOG.md || true
  sed -i -- "s/TBD_DIGEST/${TBD_DIGEST}/g" CHANGELOG.md || true
  sed -i -- "s/TBD_IMAGE_ID/${TBD_IMAGE_ID}/g" CHANGELOG.md || true
  sed -i -- "s/TBD_IMAGE_SIZE/${TBD_IMAGE_SIZE}/g" CHANGELOG.md || true
  sed -i -- "s/TBD_DOCKER_VERS/${TBD_DOCKER_VERS}/g" CHANGELOG.md || true
  sed -i -- "s/TBD_DOCKER_BUILD/${TBD_DOCKER_BUILD}/g" CHANGELOG.md || true
  sed -i -- "s/TBD_HOST_UNAME/${TBD_HOST_UNAME}/g" CHANGELOG.md || true
  sed -i -- "s/TBD_DATE/${TBD_DATE}/g" CHANGELOG.md || true
  sed -i -- "s/TBD_RUBY_VERSION/${TBD_RUBY_VERSION}/g" CHANGELOG.md || true
  sed -i -- "s/TBD_TIME_ZONE/${TBD_TIME_ZONE}/g" CHANGELOG.md || true
  sed -i -- "s/UBUNTU_FLAVOR/${UBUNTU_FLAVOR}/g" CHANGELOG.md || true
  sed -i -- "s/UBUNTU_DATE/${UBUNTU_DATE}/g" CHANGELOG.md || true
}

####################################
# Git add and commit local changes #
####################################
git_diff_add_commit() {
  git --no-pager diff --unified=0 CHANGELOG.md
  git status
  git add CHANGELOG.md
  git commit -m "${TRAVIS_TAG}: Update image id, digest & png [ci skip]"
  git --no-pager log -n3
  git branch
}

#########################
# Git push changes, tag #
#########################
git_push_tag_push() {
  if git push github HEAD:master >git_push_master.log 2>&1; then \
    failed=false; else failed=true; fi
  # hide secrets
  sed -i -- "s/${GH_TOKEN}/\[SECRET\]/g" git_push_master.log || true
  if [ ${failed} == "true" ]; then
    echoerr "Failed to git push to master!"
    cat git_push_master.log 1>&2
    exit 1
  else
    cat git_push_master.log
  fi

  git tag -f latest
  if git push --tags -f >git_push_tags.log 2>&1; then \
    failed=false; else failed=true; fi
  # hide secrets
  sed -i -- "s/${GH_TOKEN}/\[SECRET\]/g" git_push_tags.log || true
  if [ ${failed} == "true" ]; then
    echoerr "Failed to push git tags!"
    cat git_push_master.log 1>&2
    exit 2
  else
    cat git_push_master.log
  fi
}

########
# Main #
########
if [ "${TRAVIS_PULL_REQUEST}" == "true" ]; then
  echo "This is a pull request so no docker push"
elif [ "${TRAVIS_TAG}" != "latest" ] && [ "${TRAVIS_TAG}" != "" ]; then
  docker_login_tag_push
  git_config
  git_co_fetch_merge_stash
  update_changelog
  git_diff_add_commit
  git_push_tag_push
else
  echo "This is not git tagged so no version push to docker"
fi
